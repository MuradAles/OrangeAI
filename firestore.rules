rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles
      allow read: if isSignedIn();
      
      // Users can only create/update their own profile
      allow create, update: if isOwner(userId);
      
      // Users cannot delete profiles
      allow delete: if false;
      
      // Contacts subcollection
      match /contacts/{contactId} {
        // Users can read their own contacts
        allow read: if isOwner(userId);
        
        // Users can write their own contacts
        // OR when adding themselves as a contact (friend request acceptance)
        allow write: if isOwner(userId) || 
                        (isSignedIn() && request.auth.uid == contactId);
      }
      
      // Blocked users subcollection
      match /blockedUsers/{blockedUserId} {
        // Users can read/write their own blocked users list
        allow read, write: if isOwner(userId);
        
        // Also allow others to check if they are blocked (for friend request validation)
        allow read: if isSignedIn() && request.auth.uid == blockedUserId;
      }
    }
    
    // Chats collection
    match /chats/{chatId} {
      // Users can read chats they are part of
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Users can create chats
      allow create: if isSignedIn() && 
        request.auth.uid in request.resource.data.participants;
      
      // Users in the chat can update it
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Allow deletion by friend request service when blocking users
      allow delete: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Participants subcollection
      match /participants/{participantId} {
        // Allow authenticated users to read participant documents
        // (needed for incrementing unread counts and checking chat status)
        allow read: if isSignedIn();
        
        // Allow creating participant documents if the userId matches the participantId
        // This is needed for initial chat creation via batch writes
        allow create: if isSignedIn() && 
          (request.resource.data.userId == participantId);
        
        // Allow updating participant documents:
        // - Any authenticated user can update (for incrementing unread counts)
        allow update: if isSignedIn();
        
        // Allow deleting own participant document (for leaving group)
        // OR allow admin to delete others (for removing members)
        allow delete: if isSignedIn() && 
          (request.auth.uid == participantId ||
           request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)).data.groupAdminId);
      }
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user is authenticated (we'll check participant status in the app)
        allow read: if isSignedIn();
        
        // Users can create messages if they are the sender
        allow create: if isSignedIn() && 
          request.auth.uid == request.resource.data.senderId;
        
        // Allow updates if:
        // 1. User is the sender (for deleting/editing their own messages)
        // 2. User is in the chat participants (for marking messages as delivered/read)
        allow update: if isSignedIn() && 
          (request.auth.uid == resource.data.senderId ||
           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        // Users cannot delete messages
        allow delete: if false;
      }
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Users can read requests sent to them or by them
      allow read: if isSignedIn() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      
      // Users can create friend requests
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.fromUserId;
      
      // Recipient or sender can update request (accept/reject/block)
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.toUserId || 
         request.auth.uid == resource.data.fromUserId);
      
      // Sender can cancel their sent request, recipient can delete when accepting/ignoring
      allow delete: if isSignedIn() && 
        (request.auth.uid == resource.data.fromUserId ||
         request.auth.uid == resource.data.toUserId);
    }
    
    // Default: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

